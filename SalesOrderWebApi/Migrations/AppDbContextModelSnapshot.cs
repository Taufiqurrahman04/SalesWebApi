// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesOrderWebApi.Context;

#nullable disable

namespace SalesOrderWebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesOrderWebApi.Entity.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "91555283-d1b8-4e64-8136-25405bb338a2",
                            Address = "Jakarta",
                            CustomerName = "Cust Name A",
                            CustomerNo = "CS1",
                            CustomerType = "Mrs",
                            Phone = "+11"
                        },
                        new
                        {
                            Id = "8493afbc-45ce-486b-b3d4-5ca0159d40ad",
                            Address = "Bogor",
                            CustomerName = "Cust Name B",
                            CustomerNo = "CS2",
                            CustomerType = "Mr",
                            Phone = "+12"
                        },
                        new
                        {
                            Id = "64eb1e27-71eb-4e99-ba25-4d4cae11a8c9",
                            Address = "Surabaya",
                            CustomerName = "Cust Name C",
                            CustomerNo = "CS3",
                            CustomerType = "Company",
                            Phone = "+13"
                        },
                        new
                        {
                            Id = "bcbbb51c-01d6-4e5d-a4e7-244ee62c3ecd",
                            Address = "Semarang",
                            CustomerName = "Cust Name D",
                            CustomerNo = "CS4",
                            CustomerType = "Mrs",
                            Phone = "+14"
                        },
                        new
                        {
                            Id = "306e14c7-1ffe-415e-ba04-862ab009ca56",
                            Address = "Depok",
                            CustomerName = "Cust Name E",
                            CustomerNo = "CS5",
                            CustomerType = "Mr",
                            Phone = "+15"
                        });
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.MarketingArea", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MarketingAreas");

                    b.HasData(
                        new
                        {
                            Id = "33820513-45d8-4dba-a841-13b2f341a569",
                            Code = "A001",
                            Description = "Area Sumatera"
                        },
                        new
                        {
                            Id = "cbea3799-18f4-4672-bbc9-307b9943ce55",
                            Code = "A002",
                            Description = "Area Jabodetabek"
                        },
                        new
                        {
                            Id = "16683c71-b113-474f-a980-59652c0039bd",
                            Code = "A003",
                            Description = "Area Jawa, Bali dan Indonesia Timur"
                        });
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductSparepartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductSparepartId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.ProductSparepart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("COGS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductSpareparts");

                    b.HasData(
                        new
                        {
                            Id = "9a40d0e1-7bf7-4cf0-9199-f5858a44d9fb",
                            Brand = "Brand1",
                            COGS = 500m,
                            Code = "P00001",
                            Description = "Pencil",
                            Type = "PRO",
                            UOM = "PCS"
                        },
                        new
                        {
                            Id = "c28f8d1c-ddcc-4684-8f2c-5ee10b6c714c",
                            Brand = "Brand2",
                            COGS = 50000m,
                            Code = "P00002",
                            Description = "Table",
                            Type = "PRO",
                            UOM = "PCS"
                        },
                        new
                        {
                            Id = "3e0ee962-819b-45b6-aa18-035399f21a6b",
                            Brand = "Brand3",
                            COGS = 9000m,
                            Code = "P00003",
                            Description = "Bolt",
                            Type = "SPA",
                            UOM = "Box"
                        },
                        new
                        {
                            Id = "44e42048-45a2-4077-ba8a-e1873c85ac38",
                            Brand = "Brand4",
                            COGS = 1200000m,
                            Code = "P00004",
                            Description = "Shock Breaker",
                            Type = "SPA",
                            UOM = "PCS"
                        },
                        new
                        {
                            Id = "aed2eec2-0385-4b7b-8611-dae8c420bea8",
                            Brand = "Brand5",
                            COGS = 700000m,
                            Code = "P00005",
                            Description = "Tire",
                            Type = "SPA",
                            UOM = "PCS"
                        });
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketingAreaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketingAreaId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = "1dc445e8-2c81-4ba1-83ee-e08f47e48a77",
                            Address = "Jl Semeru",
                            Code = "S00001",
                            Description = "Medan",
                            MarketingAreaId = "33820513-45d8-4dba-a841-13b2f341a569",
                            Phone = "123456"
                        },
                        new
                        {
                            Id = "c0c23ef3-3c81-4362-b862-43b0344b51c2",
                            Address = "Jl Gajah",
                            Code = "S00002",
                            Description = "Palembang",
                            MarketingAreaId = "33820513-45d8-4dba-a841-13b2f341a569",
                            Phone = "123456"
                        },
                        new
                        {
                            Id = "8b649e89-48b7-4d06-9d4d-612d4fbb0093",
                            Address = "Jl Sudirman",
                            Code = "S00003",
                            Description = "Jakarta",
                            MarketingAreaId = "cbea3799-18f4-4672-bbc9-307b9943ce55",
                            Phone = "123456"
                        },
                        new
                        {
                            Id = "0b6f44f0-2701-4df1-82d1-9d66a7384fdd",
                            Address = "Jl Sudirman",
                            Code = "S00004",
                            Description = "Surabaya",
                            MarketingAreaId = "16683c71-b113-474f-a980-59652c0039bd",
                            Phone = "123456"
                        },
                        new
                        {
                            Id = "64c632f2-2eec-4e26-8ee9-4593c91cb8c2",
                            Address = "Jl Dewa",
                            Code = "S00005",
                            Description = "Bali",
                            MarketingAreaId = "16683c71-b113-474f-a980-59652c0039bd",
                            Phone = "123456"
                        });
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.Order", b =>
                {
                    b.HasOne("SalesOrderWebApi.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesOrderWebApi.Entity.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.OrderItem", b =>
                {
                    b.HasOne("SalesOrderWebApi.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesOrderWebApi.Entity.ProductSparepart", "ProductSparepart")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductSparepartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductSparepart");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.Store", b =>
                {
                    b.HasOne("SalesOrderWebApi.Entity.MarketingArea", "MarketingArea")
                        .WithMany("Stores")
                        .HasForeignKey("MarketingAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketingArea");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.MarketingArea", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.ProductSparepart", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SalesOrderWebApi.Entity.Store", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
